//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
// james was here
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define SUP  1
#define ADJ  2
#define NAVL 3
#define NAVR 4

&mt {
    quick-tap-ms = <0>;
    global-quick-tap;
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&kp>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            require-prior-idle-ms = <150>;
            layers = <0 1 2 3 4>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <16 6>;
            layers = <0 1 3 4>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            layers = <0 1>;
            require-prior-idle-ms = <150>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        capswordcut {
            bindings = <&caps_word>;
            key-positions = <20 35>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };
    };

    behaviors {
        Arrowtap: Arrowtap {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    macros {
        obs: obs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp SPACE &kp RET &kp LS(O) &kp N2 &kp RET &kp LS(B) &kp LS(P) &kp RET &kp LS(H) &kp LS(R) &kp RET &kp LS(R) &kp LS(R) &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
            label = "obs";
            wait-ms = <20>;
            tap-ms = <10>;
        };

        bloods: bloods {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(H) &kp B &kp SPACE &kp SPACE &kp SPACE &kp RET &kp LS(W) &kp LS(B) &kp LS(C) &kp SPACE &kp SPACE &kp RET &kp LS(N) &kp E &kp U &kp T &kp SPACE &kp RET &kp RET &kp LS(N) &kp A &kp SPACE &kp RET &kp LS(K) &kp SPACE &kp SPACE &kp RET &kp LS(C) &kp R &kp RET &kp RET &kp LS(C) &kp LS(R) &kp LS(P) &kp SPACE &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
            label = "BLOODS";
            wait-ms = <20>;
            tap-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                    &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y                &kp U                  &kp I         &kp O    &kp P
                    &kp A  &kp S  &kp D      &kp F  &kp G        &kp H                &kp J                  &kp K         &kp L    &kp SEMICOLON
&mt LEFT_SHIFT TAB  &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N                &kp M                  &kp COMMA     &kp DOT  &kp SQT        &Arrowtap PLUS MINUS
                                  &kp LCTRL  &sl 1  &kp SPACE    &mt RSHFT BACKSPACE  &mt RIGHT_SHIFT ENTER  &lt 2 PERIOD
            >;
        };

        SUPER {
            bindings = <
                &kp EXCL   &kp LA(LEFT_ARROW)             &Arrowtap LC(UP_ARROW) UP_ARROW      &kp LA(RIGHT)                          &kp PERCENT     &kp N7                         &kp N8        &kp N9      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
                &trans     &Arrowtap LC(LEFT_ARROW) LEFT  &Arrowtap LC(DOWN_ARROW) DOWN_ARROW  &Arrowtap LC(RIGHT_ARROW) RIGHT_ARROW  &kp QUESTION    &kp N4                         &kp N5        &kp N6      &kp FSLH              &trans
&kp LEFT_SHIFT  &kp LC(Z)  &kp LC(X)                      &kp LC(C)                            &kp LC(V)                              &kp SLASH       &kp N1                         &kp N2        &kp N3      &trans                &trans                 &Arrowtap PLUS MINUS
                                                          &trans                               &trans                                 &trans          &mt RIGHT_SHIFT LA(BACKSPACE)  &kp NUMBER_0  &kp PERIOD
            >;

            label = "super";
        };

        adjust {
            bindings = <
        &bt BT_CLR_ALL  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &trans          &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans
&trans  &trans          &trans  &trans  &trans  &trans    &obs          &trans        &trans        &trans        &trans        &bt BT_CLR
                                &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        NAVL {
            bindings = <
        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp N7   &kp N8  &kp N9    &trans  &trans  &trans  &trans  &trans
        &trans                &kp FSLH               &kp N4   &kp N5  &kp N6    &trans  &trans  &trans  &trans  &trans
&trans  &trans                &trans                 &kp N1   &kp N2  &kp N3    &trans  &trans  &trans  &trans  &trans  &trans
                                                     &kp DOT  &kp N0  &trans    &trans  &trans  &trans
            >;

            label = "NAVL";
        };

        NAVR {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp N7  &kp N8  &kp N9   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
        &trans  &trans  &trans  &trans  &trans    &kp N4  &kp N5  &kp N6   &kp FSLH              &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp N1  &kp N2  &kp N3   &trans                &trans                 &trans
                        &trans  &trans  &trans    &trans  &kp N0  &kp DOT
            >;

            label = "NAVR";
        };
    };
};
